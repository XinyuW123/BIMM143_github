---
title: "Class06 R Funtion"
author: "Xinyu Wen (PID: A17115443)"
format: pdf
toc: TRUE
---

Today we will get more exposure to functions in R. We call functions to do all our work and today we will learn how to write our own functions.

## A first silly function

Note that arguments 2 and 3 have default values (because we set y=0 and z=0), so we don't have to supply them when we call our function.
```{r}
add <- function(x, y=0, z=0) {x + y + z}
```

Can I just use this? 
  Need to run the function first.
```{r}
add(1, 1)
add(1, c(10, 100))
```

```{r}
add(100)
```

```{r}
add(100, 10, 1)
```

## A second more fun function

Let's write a function that generates random nucleotide sequences.

We can make use of the inbuilt **sample()** function in R to help us here.

```{r}
sample(x=1:10, size=9)
```

```{r}
sample(x=1:10, size=11, replace=TRUE)
```

> Q. Can you use `sample()` to generate a redom nucleotide sequence of length 5.

```{r}
sample(x = c("A", "T", "C", "G"), size =5, replace = TRUE)
```

> Q. Write a function `generate_dna()` that makes a nucleotide sequence of a user specified length.

Every function in R has at least three things:

- a **name** (in our case "generate_dna")
- one or more **input argument** (the length of sequence we want)
- a **body** (R code that does the work)

```{r}
generate_dna <- function(length = 5) {
  bases <- c("A", "T", "C", "G") 
  sample(bases, length, replace = TRUE)
  }
```

```{r}
generate_dna()
```

```{r}
generate_dna(10)
```

> Q. Can you write a `generate_protein()` function that returns amnino acid sequence of a userrequested length?

```{r}
aa <- bio3d::aa.table$aa1[1:20]
```

```{r}
generate_protein <- function(length=5) {
  sample(aa, length, replace =T)
}
```

```{r}
generate_protein(6)
```

I want my output of this functions to have no quotes, and rather be a continuous sting as opposed to individual elements.

```{r}
bases <- c("A", "T", "C", "G")
paste(bases, collapse = "")
```

```{r}
generate_protein <- function(length=5) {
  s <- sample(aa, size=length, replace=T)
  paste(s, collapse="")
}
generate_protein(6)
```


> Q. generate protein sequences from length 6 to 12?

We can use the useful utility function `sapply()` to help us "apply" our function over all the values 6 to 12.

```{r}
ans <- sapply(6:12, generate_protein)
```

```{r}
cat(paste(">ID", 6:12, sep ="", "\n", ans, "\n"))
```

> Q. Are any of these sequences unique in nature - i.e. never found in nature. We can search "refseq-protein" and look for 100% Identity and 100% coverage?

The shorter sequences (ID6:8) have 100% identity and coverage, although with high E value. Howevery, longer sequences (ID9:12) do not have 100% identity nor 100% coverage. Thus the longer sequences are unique in nature.
