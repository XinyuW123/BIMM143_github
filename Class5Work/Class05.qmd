---
title: "Class 5: Data Vis w/ ggplot"
author: "Xinyu Wen (PID: A17115443)"
format: pdf
toc: true
---

## Intro to ggplot

There are many graphic systems in R (ways to make plots and figures). These include "base" R plots.Today we will focus mostly on the **ggplot2** package.

Let's start with a plot of simple in-built dataset called `cars`.

```{r}
cars
```



```{r}
plot(cars)
```

Let's see how we can make this figure using **ggplot2**. First let's install this package on my computer. To install any R package, use the function `install.packages()`

> I will run `install.packages("ggplot2")` in my R console, not this quarto document, so that it will not be downloaded everytime I do Render.

Before I can use any functions from add on packages, I need to load the package from my "library()" with the `library(ggplot2)`.


```{r}
library(ggplot2)
ggplot(cars)
```

All ggplot have at least 3 layers: 
- **data** (the input dataset I want to plot from)
- **aes** (the aesthetic mapping of the data to my plot) 
- **geoms** (the geom_point(), geom_line(), geom_col() etc.)

```{r}
ggplot(cars) +
  aes(x=speed, y=dist) +
  geom_point()
```
Let's add a line to show the relationship:

```{r}
ggplot(cars) +
  aes(x=speed, y=dist) +
  geom_point() +
  geom_smooth(method = "lm") +
  theme_bw() +
  labs(title="My FIRST ggplot!")
```

> Q1. Which geometric layer should be used to create scatter plots in ggplot2? 

geom_point()

## Gene Expression Figure

The code to read the dataset:
```{r}
url <- "https://bioboot.github.io/bimm143_S20/class-material/up_down_expression.txt"
genes <- read.delim(url)
head(genes)
```

> Q. Use the nrow() function to find out how many genes are in this dataset.

```{r}
nrow(genes)
```

A first plot of this dataset:

```{r}
ggplot(genes) +
  aes(x=Condition1, y=Condition2, col=State) +
  geom_point() +
  theme_bw() +
  labs(title="Gene Expression Changes upon Drug Treatment",
       x="Control Expression",
       y="Drug Pressence Expression") +
  scale_colour_manual(values=c("red","gray","blue"))

```
> Q. Use the colnames() function and the ncol() function on the genes data frame to find out what the column names are (we will need these later) and how many columns there are. How many columns did you find?

```{r}
colnames(genes)
ncol(genes)
```


> Q. Use the table() function on the State column of this data.frame to find out how many ‘up’ regulated genes there are. What is your answer? 

```{r}
table(genes$State)
```

> Q. Using your values above and 2 significant figures. What fraction of total genes is up-regulated in this dataset?

```{r}
round(table(genes$State)/nrow(genes), 4) *100
```

```{r}
p <- ggplot(genes) +
  aes(x=Condition1, y=Condition2, col=State) +
  geom_point()
```








```{r}
p
```

ggplot(mtcars) + aes(x=mpg, y=disp) + geom_point() ABOVE PLOT
ggplot(mtcars, aes(mpg, disp)) + geom_point() BELOW PLOT
THEY GENERATE THE SAME PLOT
```{r}
ggplot(genes, aes(Condition1, Condition2, col=State)) +
  geom_point()
```










```{r}
p + scale_colour_manual(values=c("red","gray","blue")) + 
  theme_minimal() +
  labs(title="Gene Expression Changes upon Drug Treatment",
       x="Control Expression",
       y="Drug Pressence Expression")
```


## 7. Going Further
### gapminder_2007

```{r}
# File location online
url <- "https://raw.githubusercontent.com/jennybc/gapminder/master/inst/extdata/gapminder.tsv"

gapminder <- read.delim(url)
```

```{r}
library(dplyr)

gapminder_2007 <- gapminder %>% filter(year==2007)
```


> Q. Complete the code below to produce a first basic scater plot of this gapminder_2007 dataset:

```{r}
ggplot(gapminder_2007) +
  aes(x=gdpPercap, y=lifeExp, color=continent, size=pop) +
  geom_point(alpha=0.5) + 
  theme_bw()
```

```{r}
gap2007 <- ggplot(gapminder_2007) +
  aes(x=gdpPercap, y=lifeExp) +
  geom_point(alpha=0.5) + 
  theme_bw()
```

```{r}
gap2007 + aes(color = pop)
```

```{r}
gap2007 + aes(color = pop, size = pop) +
  scale_size_area(max_size = 10)
```

### gapminder_1957

```{r}
gapminder_1957 <- gapminder %>% filter(year==1957)
```

```{r}
gap1957 <- ggplot(gapminder_1957) +
  aes(x=gdpPercap, y=lifeExp) +
  geom_point(alpha=0.7) + 
  theme_bw()
```

```{r}
gap1957 + aes(color = continent, size = pop) +
  scale_size_area(max_size = 10)
```

```{r}
gap19572007 <- gapminder %>% filter(year==1957 | year==2007)
ggplot(gap19572007) + 
  geom_point(aes(x = gdpPercap, y = lifeExp, color=continent,
                 size = pop), alpha=0.7) + 
  theme_bw() +
  scale_size_area(max_size = 10) +
 facet_wrap(~year)
```






