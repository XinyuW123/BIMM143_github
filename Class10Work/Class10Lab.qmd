---
title: "Class 10: Structural Bioinformatics (pt1)"
author: "Xinyu Wen (A17115443)"
format: pdf
toc: TRUE
---

# 1: Introduction to the RCSB Protein Data Bank (PDB)

The main repository of biomolecular structure data is called the PDB found at https://www.rcsb.org/

Let's see what this database contains. I went to PDB > Analyze > PDB Statistics > By Exp Method and Molecular Type.

```{r}
pdbstats <- read.csv("Data Export Summary.csv")
pdbstats
```


```{r}
pdbstats$X.ray
```
The numbers are in quotes, and they are <chr>, because the comma caused them to be characters. We cannot do calculation with character, so we need to convert them into numbers.

I can fix this by replacing "," for nothing "" with the `sub()` function

```{r}
x <- pdbstats$X.ray
sum(as.numeric(sub(",", "", x)))
```

Or I can use the **readr** package and the `read_csv()` function

```{r}
library("readr")
pdbstats <- read_csv("Data Export Summary.csv")
pdbstats
```



I want to clean the column names so they are all lower case and don't have spaces in them.

```{r}
colnames(pdbstats)
```

```{r}
library("janitor")
df <- clean_names(pdbstats)
df
```




> Q1: What percentage of structures in the PDB are solved by X-Ray and Electron Microscopy.

Total number of X-ray structures
```{r}
sum(df$x_ray)
```

Total number of structures
```{r}
sum(df$total)
```


Percent of X-ray structures.
```{r}
sum(df$x_ray)/sum(df$total) *100
```
Percent of EM structures
```{r}
sum(df$em) / sum(df$total) *100
```


> Q2: What proportion of structures in the PDB are protein?

Percent of protein structure
```{r}
sum(df$total[1:3]) / sum(df$total) *100
```

> Q3: Type HIV in the PDB website search box on the home page and determine how many HIV-1 protease structures are in the current PDB?

24,695

# 2. Visualizing the HIV-1 protease structure using Mol*

The main Mol* homepage at https://molstar.org/viewer/
We can input our own PDB files or just give it a PDB databse accession code (4 letter PDB code)

![molecular view of 1HSG](1HSG.png)

![Molecular surface representation of the polymer](1HSG_2.png)


## The important role of water

> Q4: Water molecules normally have 3 atoms. Why do we see just one atom per water molecule in this structure?

Because there are a lot of water molecules around the protein. If we show all the atoms for every water molecular, they would cover up the polymer and ligand.

> Q5: There is a critical “conserved” water molecule in the binding site. Can you identify this water molecule? What residue number does this water molecule have?

It has residue number 308.

![The conserved water](1HSG_3.png)

> Q6: Generate and save a figure clearly showing the two distinct chains of HIV-protease along with the ligand. You might also consider showing the catalytic residues ASP 25 in each chain and the critical water (we recommend “Ball & Stick” for these side-chains). Add this figure to your Quarto document.

![The important ASP25 amino acids in chain A and B](1HSG_4.png)


# 3. Introduction to Bio3D in R

We can use the **bio3d** package for structural bioinformatics to read PDB data into R

```{r}
library(bio3d)

pdb <- read.pdb("1hsg")
pdb
```


> Q7: How many amino acid residues are there in this pdb object? 

```{r}
length(pdbseq(pdb))
```

> Q8: Name one of the two non-protein residues? 

MK1

> Q9: How many protein chains are in this structure? 

2 chains, A and B

Looking at the `pdb` project

```{r}
attributes(pdb)
```

```{r}
head(pdb$atom)
```

Let's try a new function not yet in the bio3d package. It requires the **r3dmol** and **shiny** package that we need to install with `install.packages("r3dmol")` and `install.packages("shiny")`.

```{r}
library(r3dmol)
source("https://tinyurl.com/viewpdb")
#view.pdb(pdb, backgroundColor = "lightblue")
```


# 4. Predicting functional dynamics

We can use the `nma()` function in bio3d to predict the large-scale functional motions of biomolecules.

```{r}
adk <- read.pdb("6s36")
adk
```
```{r}
m <- nma(adk)
plot(m)
```

Write out a trajectory of the predicted molecular motion:
```{r}
mktrj(m, file="adk_m7.pdb")
```
Load this file into Mol*

